[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fips"
version = "2025.10.0"
description = "Flexible Inverse Problem Solver (FIPS)"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "James Mineau", email = "jameskmineau@gmail.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "numpy",
    "pandas",
    "typing-extensions",
    "xarray",
]

[project.optional-dependencies]
dev = [
    "docstr-coverage>=2.0.0",
    "pre-commit>=3.0.0",
    "pyright>=1.1.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "rust-just>=1.42.4",
]
docs = [
    "pydata-sphinx-theme>=0.14.0",
    "sphinx>=7.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
]
flux = [
    "cartopy",
    "matplotlib",
    "pystilt",
]

[project.urls]
Homepage = "https://github.com/jmineau/fips"
Documentation = "https://jmineau.github.io/fips/"
Repository = "https://github.com/jmineau/fips"
Issues = "https://github.com/jmineau/fips/issues"

[tool.coverage.run]
source = ["src/fips"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

[tool.pyright]
include = ["src"]
exclude = ["**/__pycache__", "**/.venv"]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py310"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle
    "F",  # Pyflakes
    "UP",  # pyupgrade
    "B",  # flake8-bugbear
    "SIM",  # flake8-simplify
    "I",  # isort
]
ignore = [
    "E501",  # line too long, handled by formatter
]

[tool.ruff.lint.isort]
known-first-party = ["fips"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"fips" = ["py.typed"]
